
package com.pay.framework.payment.unionpay.moto.pay;

/**
 * Please modify this class to meet your needs
 * This class is not complete
 */

import java.io.IOException;
import java.net.MalformedURLException;
import java.net.URL;
import java.net.URLDecoder;
import java.text.DateFormat;
import java.text.SimpleDateFormat;
import java.util.Date;

import javax.xml.namespace.QName;

import sun.misc.BASE64Decoder;

import com.pay.framework.log.LogManager;
import com.pay.framework.payment.unionpay.moto.util.CXFClientUtil;
import com.pay.framework.payment.unionpay.moto.util.DESUtil;
import com.pay.model.OrderFormUnPay;
import com.pay.model.PaymentBean;


/**
 * This class was generated by Apache CXF (incubator) 2.0.5-incubator
 * Tue Jan 20 16:50:31 CST 2015
 * Generated source version: 2.0.5-incubator
 * 
 */

public final class PayDelegate_PayPort_Client {
	
	private static LogManager logManager = LogManager.getLogger(PayDelegate_PayPort_Client.class);

    private static final QName SERVICE_NAME = new QName("http://service.preMOTO.bjpos.com/", "PayService");
    
	public static final String C_TIME_PATTON_DEFAULT = "yyyyMMddHHmmss";

	public static final DateFormat df = new SimpleDateFormat(
			C_TIME_PATTON_DEFAULT);

    private PayDelegate_PayPort_Client() {
    }
    
    public static String  callPay(OrderFormUnPay orderform,PaymentBean payment) 
    {
    	String _pay__return="";
    	try {
			URL wsdlURL  = new URL(payment.getPosturl());
			  logManager.debug("外币支付开始连接MOTOwsdl",payment.getPosturl());
			PayService ss = new PayService(wsdlURL, SERVICE_NAME);
	        PayDelegate port = ss.getPayPort();  
	        CXFClientUtil.configTimeout(port);	       
	        StringBuffer sbf=new StringBuffer();
	        byte[] dr;
			try {
				logManager.debug("外币穿过来的编码信息为", orderform.getMemo());
				dr = ( new BASE64Decoder()).decodeBuffer(orderform.getMemo());
			} catch (IOException e) {
				e.printStackTrace();
				 logManager.debug("外币支付解码失败",null);
				return "";
			}
	        byte[] decryResult=null;
			try {
				decryResult = DESUtil.decrypt(dr);
			} catch (Exception e) {
				e.printStackTrace();
				 logManager.debug("外币支付解密失败",null);
				return "";
			}
	        String[] cardInfo=new String(decryResult).split(",");//用此字段存外卡的相关信息
	        if(cardInfo.length!=4) 
	        {
	        	 logManager.debug("外币支付解密的信息不符合要求",null);
	        	 return "";
	        }
	        sbf.append("<?xml version='1.0' encoding='GBK' ?>");
	        sbf.append("<BJPos>");
	        sbf.append("<Head>");
	        sbf.append("<TrnxDatetime>"+df.format(new Date())+"</TrnxDatetime>");
	        sbf.append("</Head>");
	        sbf.append("<Body>");
	        sbf.append("<CardNo>"+cardInfo[0]+"</CardNo>");
	        sbf.append("<Amt>"+orderform.getPrice()+"</Amt>");
	        sbf.append("<PosFlwNo>"+orderform.getOrdernumber().substring(14)+"</PosFlwNo>");
	        sbf.append("<TermId>"+payment.getExt()+"</TermId>");
	        sbf.append("<MerchId>"+payment.getMerchantid()+"</MerchId>");
	        sbf.append("<Cvv2>"+cardInfo[1]+"</Cvv2>");
	        sbf.append("<ExpiredDate>"+cardInfo[2]+"</ExpiredDate>");
	        sbf.append("<CredentialType></CredentialType>");
	        sbf.append("<CredentialNO></CredentialNO>");
	        sbf.append("<Name></Name>");
	        sbf.append("</Body>");
	        sbf.append("</BJPos>");
	        logManager.debug("连接MOTO平台成功，开始发送报文", DESUtil.encrypt(sbf.toString().getBytes()));
	        String _pay_arg0 = sbf.toString();
	        _pay__return= port.pay(_pay_arg0);
	        logManager.debug("调用MOTO平台结束，开始接受报文",_pay__return);
		} catch (MalformedURLException e) {
			logManager.debug("调用MOTO平台出现异常",e.getMessage());
			e.printStackTrace();
		}
    	return _pay__return;
    }

    public static void main(String args[]) throws Exception {
        URL wsdlURL = PayService.WSDL_LOCATION;
    
        PayService ss = new PayService(wsdlURL, SERVICE_NAME);
        PayDelegate port = ss.getPayPort();  
        CXFClientUtil.configTimeout(port);

        System.out.println("Invoking pay...");
        StringBuffer sbf=new StringBuffer();
        sbf.append("<?xml version='1.0' encoding='GBK' ?>");
        sbf.append("<BJPos>");
        sbf.append("<Head>");
        sbf.append("<TrnxDatetime>20150206141801</TrnxDatetime>");
        sbf.append("</Head>");
        sbf.append("<Body>");
        sbf.append("<CardNo>377275595483002</CardNo>");
        sbf.append("<Amt>1</Amt>");
        sbf.append("<PosFlwNo>020601</PosFlwNo>");
       // sbf.append("<TermId>01039998</TermId>");
      //  sbf.append("<MerchId>103110199999999</MerchId>");
        sbf.append("<TermId>09220290</TermId>");
        sbf.append("<MerchId>922110170130101</MerchId>");
        sbf.append("<Cvv2>2585</Cvv2>");
        sbf.append("<ExpiredDate>1604</ExpiredDate>");
     //   sbf.append("<CredentialType>01</CredentialType>");
    //    sbf.append("<CredentialNO>012345678912345678</CredentialNO>");
     //   sbf.append("<Name>zhangsan</Name>");
           sbf.append("<CredentialType></CredentialType>");
           sbf.append("<CredentialNO></CredentialNO>");
            sbf.append("<Name></Name>");
        sbf.append("</Body>");
        sbf.append("</BJPos>");
        System.out.println("pay.input=" + sbf.toString());
        java.lang.String _pay_arg0 = sbf.toString();
        java.lang.String _pay__return = port.pay(_pay_arg0);
        System.out.println("pay.result=" + _pay__return);

    }

}
